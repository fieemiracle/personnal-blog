{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{443:function(s,n,e){\"use strict\";e.r(n);var a=e(1),t=Object(a.a)({},(function(){var s=this,n=s._self._c;return n(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[n(\"p\",[s._v(\"本文已参与「新人创作礼」活动，一起开启掘金创作之路。\")]),s._v(\" \"),n(\"p\",[s._v(\"关于洋葱模型你知道多少？经过短时间接触NodeJS,浅浅地了解了NodeJS的相关知识，很多不太理解，但是对于洋葱模型，个人觉得挺有意思的，不仅是出于对名字的熟悉。刚接触NodeJS不久，今天就浅浅谈谈koa里的洋葱模型吧。\")]),s._v(\" \"),n(\"h2\",{attrs:{id:\"知识卡片\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#知识卡片\"}},[s._v(\"#\")]),s._v(\" 知识卡片\")]),s._v(\" \"),n(\"h3\",{attrs:{id:\"koa\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#koa\"}},[s._v(\"#\")]),s._v(\" -   koa\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",[n(\"code\",[s._v(\"koa是一个精简的Node框架，被认为是第二代Node框架，其最大的特点就是`独特的中间件`流程控制，是一个典型的`洋葱模型`，\\n它的核心工作包括下面两个方面：\\n\\n(1) 将Node原生的request和response封装成为一个context对象。\\n(2)  基于async/await的中间件洋葱模型机制。\\n\")])])]),n(\"h3\",{attrs:{id:\"中间件\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#中间件\"}},[s._v(\"#\")]),s._v(\" -   中间件\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- extra-class\"},[n(\"pre\",[n(\"code\",[s._v(\"中间件是一种独立的系统软件或服务程序，分布式应用软件借助这种软件在不同的技术之间共享资源。\\n中间件位于客户机/ 服务器的操作系统之上，管理计算机资源和网络通讯。(晦涩难懂了)\\n\\n重点：\\n//这是一个中间件(app.use(fun)里的fun)，有两个参数，ctx和next\\napp.use(async (ctx,next)=>{\\n    console.log('<<one');\\n    await next();\\n    console.log('one>>');\\n})\\n\\n中间件和路由处理器的参数中都有回调函数，这个函数有2,3,4个参数\\n\\n如果有两个参数就是req和res；\\n\\n如果有三个参数就是request,response和next\\n\\n如果有四个参数就是error，request，response，next\\n\")])])]),n(\"h2\",{attrs:{id:\"洋葱模型执行过程\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#洋葱模型执行过程\"}},[s._v(\"#\")]),s._v(\" 洋葱模型执行过程\")]),s._v(\" \"),n(\"p\",[s._v(\"1、koa写接口\")]),s._v(\" \"),n(\"p\",[s._v(\"为了更好地引入洋葱模型，我们先从使用koa为切入口。且看下面代码：\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"// 写接口\\nconst Koa = require('koa')//说明安装koa\\nconst app = new Koa()\\n\\nconst main = (ctx) => {\\n    //   console.log(ctx.request);\\n    if(ctx.request.url=='/home'){//localhost:3000/home访问\\n        ctx.response.body={data:1}\\n\\n    }else if(ctx.request.url=='/user'){//localhost:3000/user访问\\n        ctx.response.body={name:'fieemiracle'}\\n\\n    }else{//localhost:3000访问\\n        ctx.response.body='texts'\\n\\n    }\\n}\\napp.use(main)\\napp.listen(3000)\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\")])]),n(\"p\",[s._v(\"以上代码，当我们在后端（终端）启动这个项目，可以通过localhost:3000 || localhost:3000/home || localhost:3000/user访问，页面展示的内容不一样，分别对应分支里的内容。\")]),s._v(\" \"),n(\"p\",[s._v(\"模拟创建接口，虽然通过if分支让代码跟直观易懂，但是不够优雅，当需要创建多个不同接口时，代码冗长且不优雅，需要改进，我们这采用\"),n(\"code\",[s._v(\"路由（router）\")]),s._v(\":\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"// 优化5.js\\nconst Koa = require('koa')\\nconst app = new Koa()\\nconst fs=require('fs') ;\\n// 路由\\nconst router=require('koa-route')//安装koa-router\\n​\\n// 中间件:所有被app.use()掉的函数\\nconst main = (ctx) => {\\n  ctx.response.body = 'hello'\\n}\\n// 中间件:所有被app.use()掉的函数\\nconst about=(ctx)=>{\\n    ctx.response.type='html';\\n    ctx.response.body='<a href=\\\"https://koa.bootcss.com/\\\">About</a>'\\n    // ctx.response.body='<a href=\\\"/\\\">About</a>'\\n}\\n// 中间件:所有被app.use()掉的函数\\nconst other=(ctx)=>{\\n    ctx.response.type='json';\\n    ctx.response.body=fs.createReadStream('./6.json')\\n}\\n\\napp.use(router.get('/',main));\\napp.use(router.get('/about',about));\\napp.use(router.get('/other',other));\\n// 路由内部有中间件，不需要第二个参数next\\n\\napp.listen(3000);\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),n(\"br\")])]),n(\"p\",[s._v(\"注意app.use()语句，被app.use()过的，就是中间件。通过传入路由的方式，当我们使用localhost:3000 || localhost:3000/home || localhost:3000/user访问时候，会对应地执行app.use()。这样就更优雅了。接下来我们看看洋葱模型，跟路由这种方式的区别：\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"const Koa = require('koa');\\nconst app=new Koa();\\n\\n// 洋葱模型（koa中间件的执行顺序）\\nconst one=(ctx,next)=>{\\n    console.log('<<one');\\n    next();//执行two()\\n    console.log('one>>');\\n}\\nconst two=(ctx,next)=>{\\n    console.log('<<two');\\n    next();//执行three()\\n    console.log('two>>');\\n}\\nconst three=(ctx,next)=>{\\n    console.log('<<three');\\n    next();//没有下一个函数，执行下一个打印\\n    console.log('three>>');\\n}\\napp.use(one)\\napp.use(two)\\napp.use(three)\\n​\\napp.listen(3000,function(){\\n    console.log('start');\\n})\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),n(\"br\")])]),n(\"p\",[s._v(\"上面代码的执行顺序是什么？\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"<<one\\n<<two\\n<<three\\nthree>>\\ntwo>>\\none>>\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\")])]),n(\"p\",[s._v(\"这就是koa的洋葱模型的执行过程：先走近最外层(one),打印'<<one'--\\x3enext(),走进第二层(two),打印'<<two'--\\x3enext(),走进第三层,打印'<<three'--\\x3enext(),没有下一个中间件，打印'three>>'--\\x3e第三层执行完毕，走出第三层，打印'two>>'--\\x3e第二层执行完毕，走出第二层，打印'one>>'。如图：\")]),s._v(\" \"),n(\"p\",[n(\"img\",{attrs:{src:\"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/88b081db5e414cb6b62744dda5b425d6~tplv-k3u1fbpfcp-watermark.image?\",alt:\"image.png\"}})]),s._v(\" \"),n(\"p\",[s._v(\"这个轮廓是不是就很像洋葱的亚子。简而言之，\"),n(\"code\",[s._v(\"洋葱模型的执行过程就是：从外面一层一层的进去，再一层一层的从里面出来。\")])]),s._v(\" \"),n(\"p\",[n(\"code\",[s._v(\"洋葱模型与路由的区别在于：路由内部有内置中间件，不需要第二个参数next\")]),s._v(\"。\")]),s._v(\" \"),n(\"h2\",{attrs:{id:\"洋葱模型执行原理\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#洋葱模型执行原理\"}},[s._v(\"#\")]),s._v(\" 洋葱模型执行原理\")]),s._v(\" \"),n(\"p\",[s._v(\"上面提到过，中间件:所有被app.use()掉的函数。也就是说，没有被app.use()掉，就不算是中间件。\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"//新建一个数组，存放中间件\\ncosnt middleware=[];\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\")])]),n(\"p\",[s._v(\"当我们使用中间件的时候，首先是使用use方法，use方法会将传入的中间件回调函数存储到middleware中间件数组中。所以我们可以通过\"),n(\"code\",[s._v(\"app.use()添加中间件\")]),s._v(\"，例如：\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"app.use(function){\\n    middleware.push(function);\\n}\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])]),n(\"p\",[s._v(\"监听，当执行app.listen去监听端口的时候，其实其内部调用了http模块的createServer方法，然后传入内置的callback方法，这个callback方法就会将use方法存储的middleware中间件数组传给compose函数（后期补充该内容）。\")]),s._v(\" \"),n(\"p\",[s._v(\"那么我们将上面的洋葱模型，利用其原理改造一下吧：\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"const Koa = require('koa');\\nconst app=new Koa();\\n\\n// 添加三个中间件\\napp.use(async (ctx,next)=>{\\n    console.log('<<one');\\n    await next();\\n    console.log('one>>');\\n})\\napp.use(async (ctx,next)=>{\\n    console.log('<<two');\\n    await next();\\n    console.log('two>>');\\n})\\napp.use(async (ctx,next)=>{\\n    console.log('<<three');\\n    await next();\\n    console.log('three>>');\\n})\\n\\napp.listen(3000,function(){\\n    console.log('start');\\n})\\n\\n//<<one\\n//<<two\\n//<<three\\n//three>>\\n//two>>\\n//one>>\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),n(\"br\")])]),n(\"p\",[s._v(\"看！打印结果一样。async和洋葱模型的结合可谓是yyds了，其实，不用async也是一样的。这下明白什么是洋葱模型了吧。\")]),s._v(\" \"),n(\"blockquote\",[n(\"p\",[n(\"code\",[s._v(\"compose方法是洋葱模型的核心\")]),s._v(\"，compose方法中有一个dispatch方法，第一次调用的时候，执行的是第一个中间件函数，中间件函数执行的时候就是\"),n(\"code\",[s._v(\"再次调用dispatch函数\")]),s._v(\"，也就说形成了一个递归，这就是next函数执行的时候会执行下一个中间件的原因。\")])]),s._v(\" \"),n(\"p\",[s._v(\"因此形成了一个洋葱模型。\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"function compose (middleware) {\\n  return function (context, next) {\\n    let index = -1\\n    // 一开始的时候传入为 0，后续递增\\n    return dispatch(0)\\n    \\n    //compose方法中的dispatch方法\\n    function dispatch (i) {\\n      // 假如没有递增，则说明执行了多次\\n      if (i <= index) return Promise.reject(new Error('next() called multiple times'))\\n      index = i;\\n      \\n      // 拿到当前的中间件\\n      let fn = middleware[i];\\n      \\n      if (i === middleware.length) fn = next\\n      \\n      // 当 fn 为空的时候，就会开始执行 next() 后面部分的代码\\n      if (!fn) return Promise.resolve()\\n      try {\\n        // 执行 next() 的时候就是调用 dispatch 函数的时候\\n        return Promise.resolve(fn(context, dispatch.bind(null, i + 1)));\\n        \\n      } catch (err) {\\n        return Promise.reject(err)\\n      }\\n    }\\n  }\\n}\\n\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"9\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"10\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"11\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"12\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"13\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"14\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"15\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"16\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"17\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"18\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"19\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"20\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"21\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"22\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"23\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"24\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"25\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"26\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"27\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"28\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"29\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"30\")]),n(\"br\")])]),n(\"h2\",{attrs:{id:\"洋葱模型存在意义\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#洋葱模型存在意义\"}},[s._v(\"#\")]),s._v(\" 洋葱模型存在意义\")]),s._v(\" \"),n(\"p\",[s._v(\"当在一个app里面有很多个中间件，有些中间件需要依赖其他中间件的结果时，洋葱模型可以保证执行的顺序，如果没有洋葱模型，执行顺序可能出乎我们的预期。\")]),s._v(\" \"),n(\"h2\",{attrs:{id:\"结尾\"}},[n(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#结尾\"}},[s._v(\"#\")]),s._v(\" 结尾\")]),s._v(\" \"),n(\"p\",[s._v(\"看到第一个koa写接口的例子，我们知道上下文context（简写ctx）有两个属性，一个是request,另一个是response，洋葱模型就是以函数第二个参数next()为切割点，由外到内执行request逻辑，再由内到外执行response逻辑，这样中间件的交流就更加简单。专业一点说就是：\")]),s._v(\" \"),n(\"div\",{staticClass:\"language- line-numbers-mode\"},[n(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[n(\"code\",[s._v(\"Koa的洋葱模型是以next()函数为分割点，先由外到内执行Request的逻辑，然后再由内到外执行Response的逻辑，这里的request的\\n逻辑，我们可以理解为是next之前的内容，response的逻辑是next函数之后的内容，也可以说每一个中间件都有两次处理时机。洋葱\\n模型的核心原理主要是借助compose方法。\\n\")])]),s._v(\" \"),n(\"div\",{staticClass:\"line-numbers-wrapper\"},[n(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),n(\"br\"),n(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),n(\"br\")])])])}),[],!1,null,null,null);n.default=t.exports}}]);","extractedComments":[]}