{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[44],{450:function(n,s,a){\"use strict\";a.r(s);var e=a(1),t=Object(e.a)({},(function(){var n=this,s=n._self._c;return s(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":n.$parent.slotKey}},[s(\"hr\"),n._v(\" \"),s(\"h2\",{attrs:{id:\"highlight-a11y-darktheme-healer-readable\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#highlight-a11y-darktheme-healer-readable\"}},[n._v(\"#\")]),n._v(\" highlight: a11y-dark\\ntheme: healer-readable\")]),n._v(\" \"),s(\"p\",[s(\"em\",[s(\"strong\",[n._v(\"本文正在参加\"),s(\"a\",{attrs:{href:\"https://juejin.cn/post/7162096952883019783\",title:\"https://juejin.cn/post/7162096952883019783\",target:\"_blank\",rel:\"noopener noreferrer\"}},[n._v(\"「金石计划 . 瓜分6万现金大奖」\"),s(\"OutboundLink\")],1)])])]),n._v(\" \"),s(\"h2\",{attrs:{id:\"一、call\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一、call\"}},[n._v(\"#\")]),n._v(\" 一、call\")]),n._v(\" \"),s(\"h3\",{attrs:{id:\"_1-官方用法\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-官方用法\"}},[n._v(\"#\")]),n._v(\" （1）官方用法\")]),n._v(\" \"),s(\"p\",[s(\"strong\",[s(\"code\",[n._v(\"call()\")])]),n._v(\" 方法使用一个指定的 \"),s(\"code\",[n._v(\"this\")]),n._v(\" 值和单独给出的一个或多个参数来调用一个函数。\")]),n._v(\" \"),s(\"p\",[n._v(\"语法：function.call(要绑定的this值，参数，参数，...)。不一定这些参数都需要，这些参数都是可选的，返回值：使用调用者提供的 \"),s(\"code\",[n._v(\"this\")]),n._v(\" 值和参数调用该函数的返回值。若该方法没有返回值，则返回 \"),s(\"code\",[n._v(\"undefined\")]),n._v(\"。\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"// 不指定参数\\nvar nickname = 'global'\\n​\\nfunction getName() {\\n    console.log(this.nickname);\\n}\\ngetName() //global\\ngetName.call() //global\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),s(\"br\")])]),s(\"p\",[n._v(\"在严格模式下，\"),s(\"code\",[n._v(\"this\")]),n._v(\" 的值将会是 \"),s(\"code\",[n._v(\"undefined\")]),n._v(\"。当不给\"),s(\"code\",[n._v(\"call\")]),n._v(\"指定参数时，相当于将不改变\"),s(\"code\",[n._v(\"this\")]),n._v(\"的指向，在哪调用的就指向哪儿，即没有传递第一个参数，\"),s(\"code\",[n._v(\"this\")]),n._v(\"的值将会被绑定为全局对象。\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"// 指定第一个参数\\nvar name = 'cat'\\nvar obj = {\\n    name: 'dog'\\n}\\n​\\nfunction getName() {\\n    console.log(this.name);\\n}\\ngetName() //cat\\ngetName.call(obj) //dog\\nconsole.log(obj)//{ name: 'dog'}\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),s(\"br\")])]),s(\"p\",[n._v(\"当指定第一个参数时，第一个参数代表新的\"),s(\"code\",[n._v(\"this\")]),n._v(\"值，当调用方法时，该方法的\"),s(\"code\",[n._v(\"this\")]),n._v(\"值会绑定到\"),s(\"code\",[n._v(\"obj\")]),n._v(\"对象，于是会访问这个对象的\"),s(\"code\",[n._v(\"name\")]),n._v(\"属性。\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"//指定第一个参数和其他参数\\nvar obj = {\\n    user: 'Ducky',\\n    fn: function(a, b) {\\n        console.log(a + b);\\n        console.log(this.user);\\n    }\\n}\\nvar b = obj.fn;\\nb.call(obj, 1, 2);\\n// 3\\n// Ducky\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),s(\"br\")])]),s(\"p\",[n._v(\"除了第一个参数，其余参数都是用来做一些必要的运算等。运行到这，应该不难发现，使用\"),s(\"code\",[n._v(\"Function.call()\")]),n._v(\"的时候，函数是谁执行的？是使用\"),s(\"code\",[n._v(\"call\")]),n._v(\"绑定对象的之后，\"),s(\"code\",[n._v(\"call\")]),n._v(\"也把函数执行了。\")]),n._v(\" \"),s(\"p\",[n._v(\"相信你已经会用了，试着写写实现原理。\")]),n._v(\" \"),s(\"h3\",{attrs:{id:\"_2-实现原理\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-实现原理\"}},[n._v(\"#\")]),n._v(\" （2）实现原理\")]),n._v(\" \"),s(\"p\",[n._v(\"实现\"),s(\"code\",[n._v(\"call\")]),n._v(\"的关键在于：\")]),n._v(\" \"),s(\"p\",[n._v(\"第一：如何给函数绑定新的\"),s(\"code\",[n._v(\"this\")]),n._v(\"？\")]),n._v(\" \"),s(\"p\",[n._v(\"第二：如何在绑定完\"),s(\"code\",[n._v(\"this\")]),n._v(\"后把函数也给执行完毕？\")]),n._v(\" \"),s(\"p\",[n._v(\"掌握了这两个关键，那么一切都有迹可循了。接下来看看换成自己手写的是不是一样的效果：\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"Function.prototype.my_call = function(context) {\\n    // 如何实现绑定新的this\\n    context.fn = this //context['fn']=this\\n    // 如何在调用call时把调用call的函数也执行\\n    context.fn()\\n}\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\")])]),s(\"p\",[n._v(\"是不是大吃一惊？就实现了？是的，就是实现了，核心原理就是这两个关键，不信可以测试一下：\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"var name = 'cat'\\nvar obj = {\\n    name: 'dog'\\n}\\n​\\nfunction getName() {\\n    console.log(this.name);\\n}\\ngetName() //cat\\ngetName.my_call(obj) //dog\\nconsole.log(obj)//{ name: 'dog', fn: [Function: getName] }\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),s(\"br\")])]),s(\"p\",[n._v(\"真的绑定成功了！接下来继续做点优化，优化也有几个关键点：\")]),n._v(\" \"),s(\"p\",[n._v(\"第一：非得是函数才可以调用\"),s(\"code\",[n._v(\"call\")]),n._v(\"；\")]),n._v(\" \"),s(\"p\",[n._v(\"第二：\"),s(\"code\",[n._v(\"call\")]),n._v(\"除了接收第一个参数（新的\"),s(\"code\",[n._v(\"this\")]),n._v(\"）外，还可以接收一个参数列表；\")]),n._v(\" \"),s(\"p\",[n._v(\"第三：官方\"),s(\"code\",[n._v(\"call\")]),n._v(\"调用后，不会改变新的\"),s(\"code\",[n._v(\"this\")]),n._v(\"（\"),s(\"code\",[n._v(\"obj\")]),n._v(\"）的结构，在上述代码中\"),s(\"code\",[n._v(\"obj\")]),n._v(\"内部新增了一个属性\"),s(\"code\",[n._v(\"fn\")]),n._v(\"；\")]),n._v(\" \"),s(\"p\",[n._v(\"第四：当\"),s(\"code\",[n._v(\"call\")]),n._v(\"不传第一个参数时，需指向全局对象（\"),s(\"code\",[n._v(\"window\")]),n._v(\"）；\")]),n._v(\" \"),s(\"p\",[n._v(\"第五：调用\"),s(\"code\",[n._v(\"call\")]),n._v(\"时，需得有返回值；\")]),n._v(\" \"),s(\"p\",[n._v(\"第六：当将\"),s(\"code\",[n._v(\"this\")]),n._v(\"挂载到新的\"),s(\"code\",[n._v(\"this\")]),n._v(\"上时，后者已经存在该属性的情况下，还是会改变后者的结构。\")]),n._v(\" \"),s(\"p\",[n._v(\"终极实现原理：\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"Function.prototype.my_call = function(context, ...args) {\\n    if (typeof this !== 'function') throw new TypeError('error')\\n    context = context || 'window'\\n    let fn = Symbol('fn')\\n    context[fn] = this //context.fn = this \\n    const res = context[fn](...args)\\n    delete context[fn]\\n    return res\\n}\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),s(\"br\")])]),s(\"p\",[n._v(\"虽然考虑了六种情况，但是代码还是很可人，这回，它就是与官方的源码一样的效果和功能了，简直不要太完美~\")]),n._v(\" \"),s(\"h2\",{attrs:{id:\"二、apply\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二、apply\"}},[n._v(\"#\")]),n._v(\" 二、apply\")]),n._v(\" \"),s(\"h3\",{attrs:{id:\"_1-官方用法-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-官方用法-2\"}},[n._v(\"#\")]),n._v(\" （1）官方用法\")]),n._v(\" \"),s(\"p\",[s(\"code\",[n._v(\"apply()\")]),n._v(\" 方法调用一个具有给定 \"),s(\"code\",[n._v(\"this\")]),n._v(\" 值的函数，以及以一个数组（或一个类数组对象）的形式提供的参数。\")]),n._v(\" \"),s(\"p\",[n._v(\"语法：function.apply(要绑定的\"),s(\"code\",[n._v(\"this\")]),n._v(\"的值，[参数，参数，参数，...])，返回值：调用有指定 \"),s(\"strong\",[s(\"code\",[n._v(\"this\")])]),n._v(\" 值和参数的函数的结果。\")]),n._v(\" \"),s(\"p\",[n._v(\"可见，它跟\"),s(\"code\",[n._v(\"call\")]),n._v(\"就只有一个区别：提供参数的方式不同。\"),s(\"code\",[n._v(\"apply\")]),n._v(\" 使用参数数组而不是一组参数列表。\"),s(\"code\",[n._v(\"apply\")]),n._v(\" 可以使用数组字面量（array literal），如 \"),s(\"code\",[n._v(\"fun.apply(this, ['dog', 'cat'])\")]),n._v(\"，或数组对象，如 \"),s(\"code\",[n._v(\"fun.apply(this, new Array('dog', 'cat'))\")]),n._v(\"，还可以使用 \"),s(\"code\",[n._v(\"arguments\")]),n._v(\" 对象作为 \"),s(\"code\",[n._v(\"argsArray\")]),n._v(\" 参数。\"),s(\"code\",[n._v(\"arguments\")]),n._v(\" 是一个函数的局部变量。它可以被用作被调用对象的所有未指定的参数。这样，在使用 \"),s(\"code\",[n._v(\"apply\")]),n._v(\" 函数的时候就不需要知道被调用对象的所有参数及其个数。可以直接使用 arguments 来把所有的参数传递给被调用对象。被调用对象接下来就负责处理这些参数，要解构，要切割，要指定索引都可以。\")]),n._v(\" \"),s(\"p\",[n._v(\"既然\"),s(\"code\",[n._v(\"apply\")]),n._v(\"的用法和\"),s(\"code\",[n._v(\"call\")]),n._v(\"几乎相同，只是除第一个参数外，其余参数传递方式不一样，那么我们直接在\"),s(\"code\",[n._v(\"my_call\")]),n._v(\"的手写上修改传递参数的形式即可。\")]),n._v(\" \"),s(\"h3\",{attrs:{id:\"_2-实现原理-2\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-实现原理-2\"}},[n._v(\"#\")]),n._v(\" （2）实现原理\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"Function.prototype.my_apply = function(context, args) {\\n    if (typeof this !== 'function') throw new TypeError('error')\\n    context = context || 'window'\\n    let fn = Symbol('fn')\\n    context[fn] = this //context.fn = this \\n    const res = context[fn](...args)\\n    delete context[fn]\\n    return res\\n}\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),s(\"br\")])]),s(\"p\",[n._v(\"这。。。。，还是测试一下吧：\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"var obj = {\\n    user: 'Ducky',\\n    fn: function(a, b) {\\n        console.log(a + b);\\n        console.log(this.user);\\n    }\\n}\\nvar b = obj.fn;\\nb.my_apply(obj, [1, 2]);\\n// 3\\n// Ducky\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),s(\"br\")])]),s(\"p\",[n._v(\"好了，成功了，该考虑的已经在手写\"),s(\"code\",[n._v(\"call\")]),n._v(\"的时候考虑过了，就是这么的干净利落。\")]),n._v(\" \"),s(\"h2\",{attrs:{id:\"三、bind\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三、bind\"}},[n._v(\"#\")]),n._v(\" 三、bind\")]),n._v(\" \"),s(\"h3\",{attrs:{id:\"_1-官方用法-3\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-官方用法-3\"}},[n._v(\"#\")]),n._v(\" （1）官方用法\")]),n._v(\" \"),s(\"p\",[s(\"strong\",[s(\"code\",[n._v(\"bind()\")])]),n._v(\" 方法创建一个新的函数，在 \"),s(\"code\",[n._v(\"bind()\")]),n._v(\" 被调用时，这个新函数的 \"),s(\"code\",[n._v(\"this\")]),n._v(\" 被指定为 \"),s(\"code\",[n._v(\"bind()\")]),n._v(\" 的第一个参数，而其余参数将作为新函数的参数，提供调用时使用。\")]),n._v(\" \"),s(\"p\",[n._v(\"语法：function.bind(要绑定的\"),s(\"code\",[n._v(\"this\")]),n._v(\"值，参数1，参数2，参数3)。\")]),n._v(\" \"),s(\"p\",[n._v(\"这里说明，第一个参数是如果为空，或者为\"),s(\"code\",[n._v(\"null||undefined\")]),n._v(\"，执行作用域的\"),s(\"code\",[n._v(\"this\")]),n._v(\"将被视为形函数的的\"),s(\"code\",[n._v(\"this\")]),n._v(\"值，其余参数（当目标函数被调用时，被预置入绑定函数的参数列表中的参数）可有可无，也可在返回的新函数里面传递。返回值是返回一个原函数的拷贝，并拥有指定的 \"),s(\"strong\",[s(\"code\",[n._v(\"this\")])]),n._v(\" 值和初始参数。\")]),n._v(\" \"),s(\"p\",[n._v(\"举个例子：\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"var name = 'cat'\\nvar obj = {\\n    name: 'dog',\\n    fn: foo\\n}\\nfunction foo(a, b) {\\n    console.log(this.name, a + b);\\n    return a + b\\n}\\nconst bar = foo.bind(obj)\\nbar(3, 4)\\n//dog 7\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),s(\"br\")])]),s(\"h3\",{attrs:{id:\"_2-实现原理-3\"}},[s(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-实现原理-3\"}},[n._v(\"#\")]),n._v(\" （2）实现原理\")]),n._v(\" \"),s(\"p\",[n._v(\"从上述例子可以看出，\"),s(\"code\",[n._v(\"bind()\")]),n._v(\"会创建一个新的绑定函数\"),s(\"code\",[n._v(\"bar\")]),n._v(\"。\")]),n._v(\" \"),s(\"p\",[n._v(\"实现\"),s(\"code\",[n._v(\"bind\")]),n._v(\"函数的关键在于：\")]),n._v(\" \"),s(\"p\",[n._v(\"第一：如何新建一个绑定函数；\")]),n._v(\" \"),s(\"p\",[n._v(\"第二：如何将拿到在\"),s(\"code\",[n._v(\"call（）\")]),n._v(\"传递的参数和调用新建的绑定函数传递的参数并结合\")]),n._v(\" \"),s(\"p\",[n._v(\"第三：如果使用\"),s(\"code\",[n._v(\"new\")]),n._v(\"操作符操作新建的那个绑定函数，\"),s(\"code\",[n._v(\"this\")]),n._v(\"又该如何指向\")]),n._v(\" \"),s(\"p\",[n._v(\"先讨论以下前两个关键，新建一个绑定函数直接在\"),s(\"code\",[n._v(\"call\")]),n._v(\"内部返回一个函数即可，将两个地方的传递的参数都传递给执行绑定函数。\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"Function.prototype.my_bind = function(context, ...args1) {\\n    // 保存外部函数的this\\n    const _this = this\\n    return function bound(...args2) {//返回一个新函数\\n        //返回值\\n        return _this.call(context, ...args1, ...args2)\\n    }\\n}\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),s(\"br\")])]),s(\"p\",[n._v(\"不要惊讶在实现\"),s(\"code\",[n._v(\"bind\")]),n._v(\"函数内部用的是\"),s(\"code\",[n._v(\"call||apply\")]),n._v(\"，大不了用刚刚手写的\"),s(\"code\",[n._v(\"my_call||my_apply\")]),n._v(\"。大体上就实现了，测试一下：\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"var name = 'cat'\\nvar obj = {\\n    name: 'dog',\\n    fn: foo\\n}\\n​\\nfunction foo(a, b) {\\n    console.log(this.name, a + b);\\n    return a + b\\n}\\nconst bar = foo.my_bind(obj)\\nbar(3, 4)\\n//dog 7\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),s(\"br\")])]),s(\"p\",[n._v(\"再来考虑第三个问题：\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"//官方bind\\nconst bar = foo.bind(obj)\\nnew bar(3, 4)//cat 7\\n​\\n//手写的my_bing\\nconst bar = foo.my_bind(obj)\\nnew bar(3, 4) //dog 7\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\")])]),s(\"p\",[n._v(\"从上可以看出，当使用\"),s(\"code\",[n._v(\"new\")]),n._v(\"操作符操作新的函数\"),s(\"code\",[n._v(\"bar\")]),n._v(\"时，官方的\"),s(\"code\",[n._v(\"bind\")]),n._v(\"会忽略绑定的\"),s(\"code\",[n._v(\"this\")]),n._v(\"值，但是前置参数依然会提供给铭记函数，而我们手写的\"),s(\"code\",[n._v(\"my_bind\")]),n._v(\"原封不动，这肯定得改！\")]),n._v(\" \"),s(\"p\",[n._v(\"现在无非是，当使用\"),s(\"code\",[n._v(\"new\")]),n._v(\"运算符构造新建的绑定函数\"),s(\"code\",[n._v(\"bar\")]),n._v(\"时，\"),s(\"code\",[n._v(\"foo.bind(obj)\")]),n._v(\"中，\"),s(\"code\",[n._v(\"foo\")]),n._v(\"的·\"),s(\"code\",[n._v(\"this\")]),n._v(\"指向不指向\"),s(\"code\",[n._v(\"obj\")]),n._v(\"，也不指向全局对象，而是会指向实例对象\"),s(\"code\",[n._v(\"new bar()\")]),n._v(\"的执行作用域，接下来可以理一下思路：\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"//目标：(new bar)._proto_==foo.prototype\\n//即如果新建的绑定函数被new，bind的调用函数就会变成实力对象的构造函数\\n​\\n//接下来的操作都是在my_bind函数内部操作\\n//借助一个辅助函数\\nconst help=function(){}\\nbound.prototype=new help()//继承到了foo（bind的调用函数）的原型\\nif(this.prototype){//this指的是bind的调用函数\\n   help.prototype=this.prototype\\n }\\n​\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),s(\"br\")])]),s(\"p\",[n._v(\"通过一通操作，得到\"),s(\"code\",[n._v(\"new help()._proto_==help.prototype=this.prototype==bound.prototype\")]),n._v(\"，\"),s(\"code\",[n._v(\"this\")]),n._v(\"是什么，取决于调用\"),s(\"code\",[n._v(\"bind\")]),n._v(\"函数的函数是什么，在这里是\"),s(\"code\",[n._v(\"foo\")]),n._v(\"，所以\"),s(\"code\",[n._v(\"new bound()._proto_==bound.prototype=foo.prototype\")]),n._v(\"，那么，调用\"),s(\"code\",[n._v(\"bind\")]),n._v(\"函数的\"),s(\"code\",[n._v(\"this\")]),n._v(\"到底指向什么取决于，新建的绑定函数\"),s(\"code\",[n._v(\"bar\")]),n._v(\"有没有被\"),s(\"code\",[n._v(\"new\")]),n._v(\"，如果没有，则看传递的第一个参数，第一个参数为空则为全局对象，不为空则为指定的对象；如果被\"),s(\"code\",[n._v(\"new\")]),n._v(\"了，那么调用\"),s(\"code\",[n._v(\"nind\")]),n._v(\"函数的\"),s(\"code\",[n._v(\"this\")]),n._v(\"指向新建的绑定函数的执行作用域，\"),s(\"code\",[n._v(\"bind\")]),n._v(\"最终实现方式是：\")]),n._v(\" \"),s(\"div\",{staticClass:\"language- line-numbers-mode\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-text\"}},[s(\"code\",[n._v(\"Function.prototype.my_bind = function(context, ...args1) {\\n    if (typeof this !== 'function') {\\n        throw new TypeError('error')\\n    }\\n    context = context || window\\n    const _this = this\\n    const help = function() {}\\n    if (this.prototype) {\\n        help.prototype = this.prototype\\n    }\\n    const bound = function(...args2) {\\n        return _this.call(\\n            this instanceof help ? this : context,...args1,...args2)\\n    }\\n    bound.prototype = new help()\\n    return bound\\n}\\n\")])]),n._v(\" \"),s(\"div\",{staticClass:\"line-numbers-wrapper\"},[s(\"span\",{staticClass:\"line-number\"},[n._v(\"1\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"2\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"3\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"4\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"5\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"6\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"7\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"8\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"9\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"10\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"11\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"12\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"13\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"14\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"15\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"16\")]),s(\"br\"),s(\"span\",{staticClass:\"line-number\"},[n._v(\"17\")]),s(\"br\")])])])}),[],!1,null,null,null);s.default=t.exports}}]);","extractedComments":[]}