(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{423:function(e,n,s){"use strict";s.r(n);var a=s(1),t=Object(a.a)({},(function(){var e=this,n=e._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[n("hr"),e._v(" "),n("h2",{attrs:{id:"theme-fancyhighlight-a11y-dark"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#theme-fancyhighlight-a11y-dark"}},[e._v("#")]),e._v(" theme: fancy\nhighlight: a11y-dark")]),e._v(" "),n("p",[n("em",[n("strong",[e._v("本文正在参加"),n("a",{attrs:{href:"https://juejin.cn/post/7162096952883019783",title:"https://juejin.cn/post/7162096952883019783",target:"_blank",rel:"noopener noreferrer"}},[e._v("「金石计划 . 瓜分6万现金大奖」"),n("OutboundLink")],1)])])]),e._v(" "),n("p",[e._v("我们曾几何时在 "),n("a",{attrs:{href:"https://juejin.cn/post/7122478595787718663#heading-10",target:"_blank",rel:"noopener noreferrer"}},[e._v("  消灭异步回调，还得是async-await  "),n("OutboundLink")],1),e._v("一文中提及到Generator函数，来看看为什么说Async-Await也是Generator函数的语法糖吧。")]),e._v(" "),n("h2",{attrs:{id:"一、什么是generator函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、什么是generator函数"}},[e._v("#")]),e._v(" 一、什么是Generator函数？")]),e._v(" "),n("p",[e._v("Generator 函数也是 ES6 提供的一种解决异步编程方案，虽然Generator 函数是一个普通的函数，但是它的语法行为与传统函数完全不同！")]),e._v(" "),n("h3",{attrs:{id:"_1、基本语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、基本语法"}},[e._v("#")]),e._v(" 1、基本语法")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 基本语法\nfunction* generator() {\n    yield 'hello'\n    yield 'world'\n    return \"thanks\"\n}\nconst gen = generator()\nconsole.log(gen);\nconsole.log(gen.next());  //next1\nconsole.log(gen.next()); //next2\nconsole.log(gen.next()); //next3\nconsole.log(gen.next()); //next4\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("p",[e._v("你以为这样打印看得到结果就是完了？No！接下来，一步一步分析：")]),e._v(" "),n("h4",{attrs:{id:"_1-状态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-状态"}},[e._v("#")]),e._v(" （1）状态")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("//当只是打印Generator实例时\nconsole.log(gen); //Object [Generator] {}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("在浏览器显示会更加详细：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c496ac9899024bdc845e9ab33a0fea4e~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),e._v(" "),n("p",[e._v("结果显示，"),n("code",[e._v("[[GeneratorState]]:suspended")]),e._v("，即Generator的初始状态是暂停的。什么情况下会改变转改呢？当执行next()时，会发生什么？")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(gen.next());  //1\nconsole.log(gen.next()); //2\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br")])]),n("p",[e._v("当继续"),n("code",[e._v("只执行next1")]),e._v("或者"),n("code",[e._v("执行next1和next2")]),e._v("时，Generator实例的状态依旧是"),n("code",[e._v('[[GeneratorState]]: "suspended"')]),e._v("，并且，打印的结果分别是："),n("code",[e._v("{ value: 'hello', done: false }")]),e._v("，"),n("code",[e._v("{ value: 'world', done: false }")]),e._v("，字段"),n("code",[e._v("done")]),e._v("的值都是"),n("code",[e._v("false")]),e._v("，如图所示：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5ae01b56735f4d97aacb27e0f688fd4c~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}}),e._v("\n紧接着，继续执行"),n("code",[e._v("next3")]),e._v("，结果就不一样了：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(gen.next()); //next3\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22f7b738368d4990904473d05d92a9b4~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),e._v(" "),n("p",[e._v("可以看到，Generator实例的状态变更了："),n("code",[e._v('[[GeneratorState]]: "closed"')]),e._v("，代表"),n("code",[e._v("generator")]),e._v("函数执行完毕了，另外，"),n("code",[e._v("{ value: 'thanks', done: true }")]),e._v("，字段"),n("code",[e._v("done")]),e._v("的值都是"),n("code",[e._v("true")]),e._v("。执行完毕了还可以继续"),n("code",[e._v("next")]),e._v("嘛？看看就知道，继续执行"),n("code",[e._v("next4")]),e._v("：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("console.log(gen.next()); //next4\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6c31418825d3432ea3c6d39362e86e46~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),e._v(" "),n("p",[e._v("还是可以，Generator实例的状态依旧是关闭的，只不过，注意观察"),n("code",[e._v("next4")]),e._v("后的结果的"),n("code",[e._v("{ value: undefined, done: true }")]),e._v("。并且，在此之后，无论执行多少个"),n("code",[e._v("next")]),e._v("，结果都是"),n("code",[e._v("{ value: undefined, done: true }")]),e._v("。")]),e._v(" "),n("h4",{attrs:{id:"_2-执行"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-执行"}},[e._v("#")]),e._v(" （2）执行")]),e._v(" "),n("p",[e._v("Generator 函数"),n("code",[e._v("generator")]),e._v("函数的函数体内部有两个"),n("code",[e._v("yield")]),e._v("表达式"),n("code",[e._v("yield 'hello'和yield 'world'")]),e._v("和一个"),n("code",[e._v("return")]),e._v("语句，表示该函数有三个状态："),n("code",[e._v("hello")]),e._v("、"),n("code",[e._v("world")]),e._v("和"),n("code",[e._v("return(结束执行)")])]),e._v(" "),n("p",[e._v("第一次调用，Generator 函数"),n("code",[e._v("generator")]),e._v("开始执行，遇到第一个"),n("code",[e._v("yield")]),e._v("则暂停执行，"),n("code",[e._v("next")]),e._v("返回一个对象："),n("code",[e._v("{ value: 'hello', done: false }")]),e._v("，此时遍历还没有结束。")]),e._v(" "),n("p",[e._v("第二次调用，Generator 函数"),n("code",[e._v("generator")]),e._v("从上一次"),n("code",[e._v("yield")]),e._v("暂停执行处继续执行，直到遇到下一个"),n("code",[e._v("yield")]),e._v("则暂停执行，"),n("code",[e._v("next")]),e._v("返回一个对象："),n("code",[e._v("{ value: 'world', done: false }")]),e._v("，此时遍历还没有结束。")]),e._v(" "),n("p",[e._v("第三次调用：Generator 函数"),n("code",[e._v("generator")]),e._v("从上一次"),n("code",[e._v("yield")]),e._v("暂停执行处继续执行，直到遇到"),n("code",[e._v("return语句")]),e._v("（如果没有return语句，就执行到函数结束）则执行完毕，"),n("code",[e._v("next")]),e._v("返回一个对象："),n("code",[e._v("{ value: 'thanks', done: true }")]),e._v("，此时遍历已经结束。")]),e._v(" "),n("p",[e._v("第四次调用：Generator 函数"),n("code",[e._v("generator")]),e._v("函数已经执行完毕，"),n("code",[e._v("next")]),e._v("返回一个对象："),n("code",[e._v("{ value: 'undefined', done: true }")]),e._v("，无论接下来执行N次"),n("code",[e._v("next")]),e._v("，结果一直会是这个，不会再改变。")]),e._v(" "),n("h4",{attrs:{id:"_3-特征"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-特征"}},[e._v("#")]),e._v(" （3）特征")]),e._v(" "),n("p",[e._v("从这个简单的例子示范，可以看出：")]),e._v(" "),n("p",[e._v("第一：Genenrator函数定义时，"),n("code",[e._v("function")]),e._v("关键字与函数名之间有一个"),n("code",[e._v("*")]),e._v("，一般的写法是紧挨着"),n("code",[e._v("function")]),e._v("关键字；")]),e._v(" "),n("p",[e._v("第二：Genenrator函数的函数体内部可以通过"),n("code",[e._v("yield表达式")]),e._v("标记暂停执行（定义不同的内部状态），即遇到"),n("code",[e._v("yield")]),e._v("表达式，就会暂停执行后面的所有操作，而紧跟在"),n("code",[e._v("yield")]),e._v("后面的值作为返回对象中"),n("code",[e._v("value")]),e._v("属性的值，其实例对象通过"),n("code",[e._v("next")]),e._v("恢复执行，只有调用"),n("code",[e._v("next")]),e._v("方法才会遍历下一个内部状态，已经调用"),n("code",[e._v("next")]),e._v("方法，那么下一个"),n("code",[e._v("next")]),e._v("调用时，会在上次暂停的地方继续执行，而不是从头开始执行。；")]),e._v(" "),n("p",[e._v("第三：Genenrator函数执行时，执行结果会返回一个"),n("code",[e._v("Object [Generator] {}")]),e._v("，即遍历器对象。")]),e._v(" "),n("h3",{attrs:{id:"_2、yield表达式-next方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、yield表达式-next方法"}},[e._v("#")]),e._v(" 2、yield表达式&&next方法")]),e._v(" "),n("p",[e._v("相信你已经明白了"),n("code",[e._v("yield")]),e._v("和"),n("code",[e._v("next")]),e._v("的执行逻辑，但是也还有一些细节需要注意：")]),e._v(" "),n("h4",{attrs:{id:"_1-函数内部没有yield和return语句"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-函数内部没有yield和return语句"}},[e._v("#")]),e._v(" （1）函数内部没有"),n("code",[e._v("yield")]),e._v("和"),n("code",[e._v("return语句")])]),e._v(" "),n("p",[e._v("Genenrator函数内部没有"),n("code",[e._v("yield")]),e._v("和"),n("code",[e._v("return语句")]),e._v("时，需要使用"),n("code",[e._v("next")]),e._v("方法开启执行，不然函数不会执行，那么函数会直接执行函数内部的代码，该打印就打印，函数内部执行完毕后，"),n("code",[e._v("next")]),e._v("依然会返回一个对象："),n("code",[e._v("{ value: undefined, done: true }")]),e._v("，此时，函数的状态也由"),n("code",[e._v("[[GeneratorState]]:suspended")]),e._v("变成了"),n("code",[e._v("[[GeneratorState]]:closed")]),e._v("。")]),e._v(" "),n("p",[e._v("综上所述，Generator 函数可以不用"),n("code",[e._v("yield")]),e._v("表达式，这时就变成了一个单纯的暂缓执行函数。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// 没有yield表达式\nfunction* foo() {\n    console.log('hello');\n    console.log('world');\n}\nconst f = foo()\nconsole.log(f.next());\n// hello\n// world\n// { value: undefined, done: true }\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("h4",{attrs:{id:"_2-函数内部没有return语句时"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-函数内部没有return语句时"}},[e._v("#")]),e._v(" （2）函数内部没有"),n("code",[e._v("return语句")]),e._v("时")]),e._v(" "),n("p",[e._v("Genenrator函数内部没有"),n("code",[e._v("return语句时")]),e._v("，则返回的对象的"),n("code",[e._v("value")]),e._v("属性的值为"),n("code",[e._v("undefined")])]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function* generator() {\n    yield 'hello'\n}\nconst gen = generator()\nconsole.log(gen.next()); //{ value: 'hello', done: false }\nconsole.log(gen.next()); //{ value: undefined, done: true }\n​\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("h4",{attrs:{id:"_3-yield表达式与return语句相比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-yield表达式与return语句相比"}},[e._v("#")]),e._v(" （3）"),n("code",[e._v("yield")]),e._v("表达式与"),n("code",[e._v("return")]),e._v("语句相比")]),e._v(" "),n("p",[n("code",[e._v("yield")]),e._v("表达式具备位置记忆的功能，Genenrator函数内部可以执行多个"),n("code",[e._v("yield")]),e._v("表达式，并返回一系列值。其实"),n("code",[e._v("yield")]),e._v("表达式与"),n("code",[e._v("return")]),e._v("语句很相似，都可以返回紧接在后面的值，但是最大的区别就是可以执行多次"),n("code",[e._v("yield")]),e._v("表达式，并且每次执行都会暂停执行，需要"),n("code",[e._v("next")]),e._v("方法的调用来回复执行，同时会从上次暂停的地方继续执行；而"),n("code",[e._v("return")]),e._v("只能执行一次，并且不具备位置记忆功能。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function common() {\n    console.log('开始执行');\n}\nconst foo = common() //开始执行\n​\nfunction* generator() {\n    console.log('开始执行');\n}\nconst gen = generator()\ngen.next() //开始执行\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br")])]),n("h4",{attrs:{id:"_4-yield表达式的使用位置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-yield表达式的使用位置"}},[e._v("#")]),e._v(" （4）"),n("code",[e._v("yield")]),e._v("表达式的使用位置")]),e._v(" "),n("p",[n("code",[e._v("yield")]),e._v("表达式只能在Genenrator函数内部使用，在其他地方使用会报错。这一点与"),n("code",[e._v("await")]),e._v("必须与"),n("code",[e._v("async")]),e._v("配对使用有异曲同工之处。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("// yield的使用位置\nfunction testYield1() {\n    yield 'hello'\n}\nconst test = testYield1() \n​\n//SyntaxError: Unexpected string   报错\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("另外，如果有需要将"),n("code",[e._v("yield")]),e._v("表达式用在另外一个表达式之中，则必须放在圆括号"),n("code",[e._v("()")]),e._v("里面，否则会报错。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function* testYield2() {\n    //错误写法\n    // console.log('Hello ' + yield); \n    // console.log('Hello ' + yield 'World'); \n    //SyntaxError: Unexpected identifier\n    \n    //正确写法\n    console.log('Hello ' + (yield));\n    console.log('Hello ' + (yield 'World'));\n}\nconst gen = testYield2()\nconsole.log(gen.next());\nconsole.log(gen.next());\nconsole.log(gen.next());\n​\n// { value: undefined, done: false }\n// Hello undefined\n// { value: 'World', done: false }\n// Hello undefined\n// { value: undefined, done: true }\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br")])]),n("h3",{attrs:{id:"_3、中间件next"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、中间件next"}},[e._v("#")]),e._v(" 3、中间件next()")]),e._v(" "),n("p",[e._v("在上面的例子中，都只是纯纯地调用"),n("code",[e._v("next()")]),e._v("方法，没有给它传递参数，是不能接收参数嘛？当然不是。"),n("code",[e._v("next()")]),e._v("也可以接收参数，因为"),n("code",[e._v("yield")]),e._v("本身没有返回值。"),n("code",[e._v("next")]),e._v("方法可以携带一个参数，这个参数就会被当做上一个"),n("code",[e._v("yield")]),e._v("表达式的返回值。")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function* generator() {\n    for (let i = 1; i < 3; i++) {\n        let yieldVal = yield i;\n        console.log('yieldVal=', yieldVal);\n        if (yieldVal == 2) {\n            i = 0\n        }\n    }\n}\nlet gen = generator()\nconsole.log('nextObj=', gen.next());\nconsole.log('nextObj=', gen.next());\nconsole.log('nextObj=', gen.next(2));\nconsole.log('nextObj=', gen.next());\nconsole.log('nextObj=', gen.next());\n​\n//打印结果：\n// nextObj= { value: 1, done: false }\n// yieldVal= undefined\n// nextObj= { value: 2, done: false }\n// yieldVal= 2\n// nextObj= { value: 1, done: false }\n// yieldVal= undefined\n// nextObj= { value: 2, done: false }\n// yieldVal= undefined\n// nextObj= { value: undefined, done: true }\n​\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br"),n("span",{staticClass:"line-number"},[e._v("24")]),n("br"),n("span",{staticClass:"line-number"},[e._v("25")]),n("br"),n("span",{staticClass:"line-number"},[e._v("26")]),n("br"),n("span",{staticClass:"line-number"},[e._v("27")]),n("br")])]),n("p",[e._v("观察"),n("code",[e._v("yieldVal")]),e._v("每次打印的值可以发现，"),n("code",[e._v("yieldVal=undefined")]),e._v("总是等于"),n("code",[e._v("undefined")]),e._v("，即"),n("code",[e._v("yield")]),e._v("总是返回"),n("code",[e._v("`当给")]),e._v("next"),n("code",[e._v("传递一个参数2的时候，")]),e._v("yieldVal=2"),n("code",[e._v("，所以符合")]),e._v("if"),n("code",[e._v("条件，")]),e._v("i=0"),n("code",[e._v("，那么下一次循环就会从")]),e._v("0"),n("code",[e._v("开始递增。所以说，")]),e._v("next"),n("code",[e._v("方法的参数会作为外部的值注入到函数体内部，并且被当做上一个")]),e._v("yield`表达式的返回值。")]),e._v(" "),n("p",[e._v("简单概括一下："),n("code",[e._v("next")]),e._v("方法传入的参数会作为上一个"),n("code",[e._v("yield")]),e._v("表达式的返回值，然而，我们在第一次调用"),n("code",[e._v("next")]),e._v("并且传入参数时，是无效的，V8引擎会自动忽略第一使用"),n("code",[e._v("next")]),e._v("的参数，只会从第二次调用"),n("code",[e._v("next")]),e._v("时开始，传入的参数才是有效的。难道第一次调用"),n("code",[e._v("next")]),e._v("没有意义了？当然不是，第一次调用"),n("code",[e._v("next")]),e._v("方法是用来启动遍历器对象的，不需要带参数。")]),e._v(" "),n("p",[e._v("这时候就有一个疑问了，我就是要在第一次调用的时候给"),n("code",[e._v("next")]),e._v("传入参数，并且生效，怎么办？自然还是有解决办法的：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function outerFun(generatorFun) {//参数是一个Generator函数\n    return function() {//return出去一个函数\n        let gen = generatorFun()\n        gen.next()\n        return gen\n    }\n}\n​\nconst outer = outerFun(function*() {\n    console.log(`你第一次传入的参数是: ${yield}`)\n    return 'World'\n});\n​\nouter().next('Hello!')\n//你第一次传入的参数是: Hello~\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("p",[e._v("从上述例子中可以看出，Generator函数作为"),n("code",[e._v("outerFun")]),e._v("（普通函数）的形参，然后"),n("code",[e._v("return")]),e._v("出去一个执行函数（匿名函数），调用"),n("code",[e._v("outerFun")]),e._v("，并传入实参，因为闭包的存在，最后执行匿名函数。可见，Generator函数被函数"),n("code",[e._v("outerFun")]),e._v("包裹了一层，让第一次调用"),n("code",[e._v("next")]),e._v("方法时，传入的参数生效。")]),e._v(" "),n("h3",{attrs:{id:"_4、作为对象的属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、作为对象的属性"}},[e._v("#")]),e._v(" 4、作为对象的属性")]),e._v(" "),n("p",[e._v("这里肯定让人很奇怪，好歹Generator函数也是函数，函数还可以作为对象的键？是什么限制了我的无知。。。。如果一个对象的属性的Generator函数，该怎么写呢？")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let obj = {\n    * generator() {\n        console.log('Genrator函数');\n        return 'hello'\n    }\n};\nconsole.log(obj.generator);\n//[GeneratorFunction: generator]\n​\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br")])]),n("p",[e._v("通过展示，发现定义"),n("code",[e._v("generator")]),e._v("时，前面多了个"),n("code",[e._v("*")]),e._v("，表示该属性是一个Generator函数，这种写法不便于记忆和理解，也可以写成下面的形式：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("let obj = {\n    generator: function*() {\n        console.log('Genrator函数');\n        return 'hello'\n    }\n}\nconsole.log(obj.generator); //[GeneratorFunction: generator]\n​\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br")])]),n("p",[e._v("这种形式就是我们熟悉的写法了，函数名字作为对象的键，而函数本身作为对象的值。")]),e._v(" "),n("h3",{attrs:{id:"_5、this指向"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、this指向"}},[e._v("#")]),e._v(" 5、this指向")]),e._v(" "),n("p",[n("code",[e._v("Generator函数的this")]),e._v("关键字，首先箭头函数是没有"),n("code",[e._v("this")]),e._v("的，那Generator函数里面有"),n("code",[e._v("this")]),e._v("吗？")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Person() {\n    this.name = 'Person'\n}\n​\nfunction* Student() {\n    this.name = 'Student'\n}\n​\nlet person = new Person()\nconsole.log(person); //Person { name: 'Person' }\nconsole.log(person.name); //Person\nlet student = Student()\nconsole.log(student); //Object [Generator] {}\nstudent.next()\nconsole.log(student.name); //undefined\n​\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br")])]),n("p",[e._v("从上述代码可以看出，Generator函数返回的总是遍历器对象，就算在Generator函数内部的"),n("code",[e._v("this")]),e._v("上挂上一个属性"),n("code",[e._v("name")]),e._v("，但是返回的遍历器对象就是拿不到这个属性。难道是Generator函数没有"),n("code",[e._v("this")]),e._v("?有没有，打印以下就知道了：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function* gen() {\n    console.log(this);\n}\nlet g = gen()\ng.next()\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bfff9f90470441dc961f917e751e0c94~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),e._v(" "),n("p",[e._v("有打印结果，说明是存在你"),n("code",[e._v("this")]),e._v("的，只不过，Generator函数返回的遍历器对象无法继承"),n("code",[e._v("this")]),e._v("。那怎么样才能访问"),n("code",[e._v("this")]),e._v("呢？遍历器对象不能访问，那正常的对象是不是就可以了呢？")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function* gen() {\n    this.name = 'cat'\n}\nlet obj = {}\nlet g = gen.call(obj)\n​\nconsole.log(obj instanceof gen); //false\nconsole.log(g instanceof gen); //true\n​\nconsole.log(obj); //{name:'cat'}\nconsole.log(g); //Object [Generator] {}\n​\ng.next()\nconsole.log(obj.name); //cat\nconsole.log(g.name); //undefined\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br")])]),n("p",[e._v("上述例子中，将Generator函数"),n("code",[e._v("gen")]),e._v("的"),n("code",[e._v("this")]),e._v("绑定到一个空对象上，即Generator函数"),n("code",[e._v("gen")]),e._v("的"),n("code",[e._v("this")]),e._v("指向这个空对象。这样的话，Generator函数"),n("code",[e._v("gen")]),e._v("执行后，就能访问Generator函数"),n("code",[e._v("gen")]),e._v("的"),n("code",[e._v("this")]),e._v("了。不过Generator函数的遍历器对象依旧不能够访问"),n("code",[e._v("this")]),e._v("。那就是要遍历器对象"),n("code",[e._v("g")]),e._v("访问"),n("code",[e._v("this")]),e._v("上的属性，怎么办？有一个办法是将Generator函数的原型替换这个空对象，Generator函数中"),n("code",[e._v("[[Prototype]]: Generator")]),e._v("，Generator函数的prototype是除掉yield以外的语句：")]),e._v(" "),n("p",[n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a53ca68226eb42bd886874965b49db24~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),e._v(" "),n("h3",{attrs:{id:"_6、与构造函数相比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、与构造函数相比"}},[e._v("#")]),e._v(" 6、与构造函数相比")]),e._v(" "),n("p",[e._v("与构造函数相比，Generator函数无法"),n("code",[e._v("new")]),e._v("。举个例子：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function Person() {}\nPerson.prototype.say = function() {\n    console.log('good morning!');\n}\nlet person = new Person()\nconsole.log(person instanceof Person);\nperson.say()\n​\n​\nfunction* Student() {}\nStudent.prototype.say = function() {\n    console.log('good afternoon!');\n}\n​\nlet student = Student()\nconsole.log(student instanceof Student);\nstudent.say()\n​\n//测试能不能使用new操作符\nlet test = new Student()\nconsole.log(test instanceof Student); \n//TypeError: Student is not a constructor\n​\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br"),n("span",{staticClass:"line-number"},[e._v("13")]),n("br"),n("span",{staticClass:"line-number"},[e._v("14")]),n("br"),n("span",{staticClass:"line-number"},[e._v("15")]),n("br"),n("span",{staticClass:"line-number"},[e._v("16")]),n("br"),n("span",{staticClass:"line-number"},[e._v("17")]),n("br"),n("span",{staticClass:"line-number"},[e._v("18")]),n("br"),n("span",{staticClass:"line-number"},[e._v("19")]),n("br"),n("span",{staticClass:"line-number"},[e._v("20")]),n("br"),n("span",{staticClass:"line-number"},[e._v("21")]),n("br"),n("span",{staticClass:"line-number"},[e._v("22")]),n("br"),n("span",{staticClass:"line-number"},[e._v("23")]),n("br")])]),n("h3",{attrs:{id:"_7、与async-await相比"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、与async-await相比"}},[e._v("#")]),e._v(" 7、与Async-Await相比")]),e._v(" "),n("p",[e._v("为什么说Async-Await是Generator函数的语法糖？那就举个例子，首先定义一个工具函数"),n("code",[e._v("foo")]),e._v("，接收一个形参"),n("code",[e._v("num")]),e._v("：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function foo(num) {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            resolve(num * 2)\n        }, 1000)\n    })\n}\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("接下来同时分别使用Async-Await和Generator函数来实现：依次调用传递的参数，首先使用Generator函数实现展示：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("function* gen() {\n    foo(1)\n    yield\n    foo(2)\n    yield\n    foo(3)\n    yield\n}\nlet g=gen()\ng.next()//2\ng.next()//4\ng.next()//6\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br"),n("span",{staticClass:"line-number"},[e._v("8")]),n("br"),n("span",{staticClass:"line-number"},[e._v("9")]),n("br"),n("span",{staticClass:"line-number"},[e._v("10")]),n("br"),n("span",{staticClass:"line-number"},[e._v("11")]),n("br"),n("span",{staticClass:"line-number"},[e._v("12")]),n("br")])]),n("p",[e._v("然后看看Async-Await如何实现：")]),e._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[e._v("async function AsyncAwait() {\n    await foo(1)\n    await foo(2)\n    await foo(3)\n}\nAsyncAwait()\n//2 4 6\n")])]),e._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[e._v("1")]),n("br"),n("span",{staticClass:"line-number"},[e._v("2")]),n("br"),n("span",{staticClass:"line-number"},[e._v("3")]),n("br"),n("span",{staticClass:"line-number"},[e._v("4")]),n("br"),n("span",{staticClass:"line-number"},[e._v("5")]),n("br"),n("span",{staticClass:"line-number"},[e._v("6")]),n("br"),n("span",{staticClass:"line-number"},[e._v("7")]),n("br")])]),n("p",[e._v("对比完发下，Async-Await简直不要太~优雅了。就好比声明Generator函数的"),n("code",[e._v("*")]),e._v("换成了"),n("code",[e._v("async")]),e._v("，"),n("code",[e._v("yield")]),e._v("表达式换成了"),n("code",[e._v("await")]),e._v("，但是Async-Await就让人更舒适。")])])}),[],!1,null,null,null);n.default=t.exports}}]);