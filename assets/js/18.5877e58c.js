(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{422:function(s,e,n){"use strict";n.r(e);var a=n(1),t=Object(a.a)({},(function(){var s=this,e=s._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[e("em",[e("strong",[s._v("本文正在参加"),e("a",{attrs:{href:"https://juejin.cn/post/7162096952883019783",title:"https://juejin.cn/post/7162096952883019783",target:"_blank",rel:"noopener noreferrer"}},[s._v("「金石计划 . 瓜分6万现金大奖」"),e("OutboundLink")],1)])])]),s._v(" "),e("h2",{attrs:{id:"一、剖析promise的基础框架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、剖析promise的基础框架"}},[s._v("#")]),s._v(" 一、剖析Promise的基础框架")]),s._v(" "),e("p",[s._v("要实现Promise原理，肯定得先明白其原理。Promsie的基础框架如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("// 挂在原型上的方法，实例对象可以访问并且使用\nMyPromise.prototype.then = function(onResolved, onRejected) {\n    //.then接收两个函数类型的形参，分别处理Promise为成功和失败状态时的情况\n}\nMyPromise.prototype.catch = function(onRejected) {\n    //.catch接收一个函数类型的形参，相当于.then的第二个回调函数\n}\n//...还有一些其他方法\nfunction MyPromise(executor) {\n    // Promise的初始状态为pending\n    let self = this;\n    this.status = 'pending'\n    //executor包含两个函数类型的形参，即resolve和reject\n    function resolve() {}\n​\n    function reject() {}\n​\n    //其他具体操作\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br")])]),e("h2",{attrs:{id:"二、实现promsie中两个类型为函数的形参"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、实现promsie中两个类型为函数的形参"}},[s._v("#")]),s._v(" 二、实现Promsie中两个类型为函数的形参")]),s._v(" "),e("p",[s._v("我们首先要明白的是：")]),s._v(" "),e("h3",{attrs:{id:"_1、promise的三种状态"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、promise的三种状态"}},[s._v("#")]),s._v(" 1、Promise的三种状态")]),s._v(" "),e("p",[s._v("（1）pending（待处理）：Promise的初始状态 （2）fufilled（处理成功）：Promise执行完resolve回调后的状态 （3）rejected（处理失败）：Promise执行完reject回调后的状态 当Promise状态为pending状态的时候，为同步代码，如果后面接.then，不会执行它的回调函数； 当状态为resolved和rejected是，为异步代码，可用定时器模拟实现。")]),s._v(" "),e("h3",{attrs:{id:"_2、promise的两个类型为函数的形参"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、promise的两个类型为函数的形参"}},[s._v("#")]),s._v(" 2、Promise的两个类型为函数的形参")]),s._v(" "),e("p",[s._v("（1）resolve：调用resolve函数，Promise状态变为成功")]),s._v(" "),e("p",[s._v("（2）reject：调用reject函数，Promise状态变为失败")]),s._v(" "),e("p",[s._v("有了以上的知识基础，是不是就更好下手了。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("(function(window) {\n    function MyPromise(executor) {\n        let self = this //保存this对象\n        self.status = 'pending' //初始状态为pending\n        self.data = undefined\n        self.callbacks = []\n​\n        // 实现resolve\n        function resolve(value) {\n            //必须是pending状态,Promsie的状态只会被改变一次\n            if (self.status !== 'pending') {\n                return\n            }\n            // 将状态变为fullfilled\n            self.status = 'fullfilled'\n            self.data = value\n​\n            //有没有待执行的回调函数\n            if (self.callbacks.length > 0) {\n                //如果有，必须都执行\n                setTimeout(() => {//定时器模拟异步\n                    self.callbacks.forEach(callbackObj => {\n                            callbackObj.onResolved(value)\n                    })\n                })\n            }\n        }\n​\n        function reject(value) {\n            // 同样也必须是pending状态\n            if (self.status !== 'pending') {\n                return\n            }\n            // 将状态变为rejected\n            self.status = 'rejected'\n            self.data = value\n​\n            // 有没有待执行的回调\n            if (self.callbacks.length > 0) {\n                //如果有，必须都执行\n                setTimeout(() => {//定时器模拟异步\n                    self.callbacks.forEach(callbackObj => {\n                        callbackObj.onRejected(value)//失败的回调\n                    })\n                })\n            }\n        }\n        \n        try {\n            executor(resolve, reject)\n        } catch (error) {\n            reject(error)\n        }\n    }\n    window.MyPromise = MyPromise\n})(window)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br"),e("span",{staticClass:"line-number"},[s._v("35")]),e("br"),e("span",{staticClass:"line-number"},[s._v("36")]),e("br"),e("span",{staticClass:"line-number"},[s._v("37")]),e("br"),e("span",{staticClass:"line-number"},[s._v("38")]),e("br"),e("span",{staticClass:"line-number"},[s._v("39")]),e("br"),e("span",{staticClass:"line-number"},[s._v("40")]),e("br"),e("span",{staticClass:"line-number"},[s._v("41")]),e("br"),e("span",{staticClass:"line-number"},[s._v("42")]),e("br"),e("span",{staticClass:"line-number"},[s._v("43")]),e("br"),e("span",{staticClass:"line-number"},[s._v("44")]),e("br"),e("span",{staticClass:"line-number"},[s._v("45")]),e("br"),e("span",{staticClass:"line-number"},[s._v("46")]),e("br"),e("span",{staticClass:"line-number"},[s._v("47")]),e("br"),e("span",{staticClass:"line-number"},[s._v("48")]),e("br"),e("span",{staticClass:"line-number"},[s._v("49")]),e("br"),e("span",{staticClass:"line-number"},[s._v("50")]),e("br"),e("span",{staticClass:"line-number"},[s._v("51")]),e("br"),e("span",{staticClass:"line-number"},[s._v("52")]),e("br"),e("span",{staticClass:"line-number"},[s._v("53")]),e("br"),e("span",{staticClass:"line-number"},[s._v("54")]),e("br"),e("span",{staticClass:"line-number"},[s._v("55")]),e("br"),e("span",{staticClass:"line-number"},[s._v("56")]),e("br")])]),e("p",[s._v("简单概括，实现resolve和reject步骤，")]),s._v(" "),e("p",[s._v("（1）判断状态是否为‘pending’，必须是'pending'状态，因为Promise的状态只会改变一次，如果执行resolve和reject的时候，状态不是'pending'状态，那么它的状态是不会再被改变的。如果状态仍然为Promsie的初始状态'pending'，则进行下一步操作；否则，如果不是，直接跳过，不需要任何返回值。")]),s._v(" "),e("p",[s._v("（2）如果是'pending'状态，将状态改变为成功或者失败状态，同时将数据包裹传递，让.then或者.catch执行的时候，可以得到返回值；")]),s._v(" "),e("p",[s._v("（3）判断是否还有未执行的回调函数，一般是指.then或者.catch里面的还未执行的回调函数，如果有的话，必须都执行，同时他都是异步代码，使用定时器模拟异步效果。")]),s._v(" "),e("p",[s._v("（4）最后，使用*try{}catch(){}*模块，try里面执行这个Promise的异步函数，如果有异常，统一按照rejected状态处理错误。")]),s._v(" "),e("h2",{attrs:{id:"三、实现-then"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三、实现-then"}},[s._v("#")]),s._v(" 三、实现.then")]),s._v(" "),e("p",[s._v("（1）then接收两个函数类型的参数，第一个是Promise成功情况的回调，第二个是失败情况的回调；当Promise状态为成功时执行第一个回调函数，当Promsie状态为失败时执行第二个回调函数。")]),s._v(" "),e("p",[s._v("（2）Promise的.then是微任务")]),s._v(" "),e("p",[s._v("（3）Promise的.then可以链式调用")]),s._v(" "),e("p",[s._v("（4）.then返回的是一个Promise对象")]),s._v(" "),e("p",[s._v(".then是Promise原型上的，所以可以将它挂载原型上实现：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("MyPromise.prototype.then = function(onResolved, onRejected) {\n        // 把回调用对象包裹，存放在callbacks中\n        let self = this\n        return new MyPromise((resolve, reject) => {\n            if (self.status === 'pending') { //状态还未改变，.then有两个回调函数\n                self.callbacks.push({\n                    onResolved,\n                    onRejected\n                })\n            } else if (self.status === 'fullfilled') { //状态为成功，执行onResolved\n                //定时器模拟.then的异步执行\n                setTimeout(() => {\n                    const result = onResolved(self.data)\n                    if (result instanceof MyPromise) { //返回值是Promise对象\n                        result.then( //为了将result的状态变更成resolved\n                            (res) => {\n                                resolve(res)\n                            },\n                            (err) => {\n                                reject(err)\n                            }\n                        )\n                        return result\n                    } else { //返回值不是Promise对象\n                        resolve(result)\n                    }\n                })\n            } else { //状态为成功，执行onRejected\n                setTimeout(() => {\n                    onRejected(self.data)\n                })\n            }\n        })\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br"),e("span",{staticClass:"line-number"},[s._v("26")]),e("br"),e("span",{staticClass:"line-number"},[s._v("27")]),e("br"),e("span",{staticClass:"line-number"},[s._v("28")]),e("br"),e("span",{staticClass:"line-number"},[s._v("29")]),e("br"),e("span",{staticClass:"line-number"},[s._v("30")]),e("br"),e("span",{staticClass:"line-number"},[s._v("31")]),e("br"),e("span",{staticClass:"line-number"},[s._v("32")]),e("br"),e("span",{staticClass:"line-number"},[s._v("33")]),e("br"),e("span",{staticClass:"line-number"},[s._v("34")]),e("br")])]),e("p",[s._v("实现.then最大的难点就是它的链式调用，如果返回值是一个Promise对象，就执行.then里面的操作；但是如果返回值不是Promsie对象，那就直接调用Promise的resolve函数。另外，还需要明确this的指向，这里this指向的不是新生成的Pomise对象，这点比较重要。")]),s._v(" "),e("h2",{attrs:{id:"四、实现-catch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四、实现-catch"}},[s._v("#")]),s._v(" 四、实现.catch")]),s._v(" "),e("p",[s._v("（1）.catch回调相当于.then的第二个回调，可以捕获reject出来的错误或者直接在Promsie内部throw new Error()出来的错误。它的实现相对比较简单，如果状态为rejected，我们就执行onRejected函数，同时也需要使用定时器模拟异步。")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("MyPromise.prototype.catch = function(onRejected) {\n        let self = this\n        if (self.status == 'pending') {\n            self.callbacks.push({\n                onRejected\n            })\n        } else if (self.status == 'rejected') {\n            setTimeout(() => {\n                onRejected(self.data)\n            })\n        }\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br")])]),e("p",[s._v("除了.then和.catch方法是挂载在Promise原型上的回调函数，还有Promise.prototype.finally()；另外Promise.all()，Promise.race()。。。不是原型上的方法。感兴趣的可以尝试写出他们的实现原理。")]),s._v(" "),e("h2",{attrs:{id:"五、测试"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五、测试"}},[s._v("#")]),s._v(" 五、测试")]),s._v(" "),e("h3",{attrs:{id:"_1、resolve"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、resolve"}},[s._v("#")]),s._v(" 1、resolve")]),s._v(" "),e("p",[s._v("Promsie内部没有任何其他return情况，测试如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let promise = new MyPromise((resolve, reject) => {\n    resolve('成功啦~')\n}).then(res => {\n    console.log(res); //成功啦~\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"_2、reject"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、reject"}},[s._v("#")]),s._v(" 2、reject")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let promise = new MyPromise((resolve, reject) => {\n    reject('失败啦~')\n}).then(res => {\n    console.log(res);\n}, err => {\n    console.log(err);//失败啦~\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h3",{attrs:{id:"_3、-then"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3、-then"}},[s._v("#")]),s._v(" 3、.then")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let MyPromiseTest = new MyPromise((resolve, reject) => {\n        resolve('成功啦');\n    }).then(res => {\n        console.log(res);\n​\n    })\n    .then(res => {\n        console.log('猜猜我打印什么');\n    })\n//成功啦\n//猜猜我打印什么\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("h3",{attrs:{id:"_4、-catch"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4、-catch"}},[s._v("#")]),s._v(" 4、.catch")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("let promise = new MyPromise((resolve, reject) => {\n    reject('失败啦')\n}).catch(err => {\n    console.log(err);//失败啦\n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("以上实现原理只能在浏览器执行成功，因为node端没有window对象；如果想在node端实现Promie原理，最推荐和优雅的方式就是使用ES6里面的class（类），使用类的话，原型上的方法就写在constructor里面，而其他方法不是原型上的，是类的静态方法，逻辑都一样的哦~。")])])}),[],!1,null,null,null);e.default=t.exports}}]);