(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{442:function(n,e,s){"use strict";s.r(e);var a=s(1),t=Object(a.a)({},(function(){var n=this,e=n._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[e("em",[e("strong",[n._v("本文正在参加"),e("a",{attrs:{href:"https://juejin.cn/post/7162096952883019783",title:"https://juejin.cn/post/7162096952883019783",target:"_blank",rel:"noopener noreferrer"}},[n._v("「金石计划 . 瓜分6万现金大奖」"),e("OutboundLink")],1)])])]),n._v(" "),e("h2",{attrs:{id:"一、类型推论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一、类型推论"}},[n._v("#")]),n._v(" 一、类型推论")]),n._v(" "),e("p",[n._v("类型推论，顾名思义就是指类型在哪里如何被推断。在TS语法中，如果有些没地方有明确指出类型，类型推论就会帮助提供类型，即声明变量时，不赋给类型，就会触发类型推论。")]),n._v(" "),e("h3",{attrs:{id:"_1、最佳通用类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1、最佳通用类型"}},[n._v("#")]),n._v(" 1、最佳通用类型")]),n._v(" "),e("p",[n._v("最佳通用类型就是指，在一个或者多个表达式中，变量的类型会从这些表达式中的所有类型来推断出一个最合适的通用类型。")]),n._v(" "),e("p",[n._v("举个例子：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let brand = 'YSL'\nbrand = 123\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br")])]),e("p",[n._v("当定义一个变量"),e("code",[n._v("brand")]),n._v("，变量brand的类型被推断为字符串，但是后来修改值为另外一种类型，如number，boolean等，TS就会很贴心的提示不能将其他类型分配给字符串。然而这只是从单个表达式里面推断，如果是多个表达式呢？又会如何推断呢？例如：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let money = [1, 'yuan', null]\nmoney = [123]\nmoney = ['hello']\nmoney = [null]\n​\n​\nmoney = [{ name: 'ducky' }]//错误提示\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br")])]),e("p",[n._v("可见，当需要从几个表达式中推断类型时候，会使用这些表达式的类型来推断出一个最合适的通用类型---称为最佳通用类型。当有多个表达式时，为了推断"),e("code",[n._v("money")]),n._v("的类型，必须要考虑所有元素的类型。 这里有三种选择： "),e("code",[n._v("number")]),n._v("，"),e("code",[n._v("string")]),n._v("和"),e("code",[n._v("null")]),n._v("。 计算通用类型算法会考虑所有的候选类型，并给出一个兼容所有候选类型的类型。那如果想要的类型不在候选名单上，又该如何推论呢？例如：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function Animal() {\n    console.log('animal');\n}\nfunction Food() {\n    console.log('food');\n}\nfunction Fruit() {\n    console.log('fruit');\n}\nlet target= [new Animal(), new Food(), new Fruit()]\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br")])]),e("p",[n._v("如果想让"),e("code",[n._v("terget")]),n._v("的类型被推断为"),e("code",[n._v("People[]")]),n._v("类型，但是数组里的候选类型有三种，没有"),e("code",[n._v("People[]")]),n._v("类型，这肯定是不能推断出结果的。那怎么办呢？这种情况下，当候选类型不能使用的时候，我们必须明确地指出类型：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let target:People[]= [new Animal(), new Food(), new Fruit()]\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br")])]),e("p",[n._v("此时，如果没有找到最佳通用类型的话，"),e("code",[n._v("target")]),n._v("会被推断为联合数组类型："),e("code",[n._v("(Animal|Food|Fruit)[]")])]),n._v(" "),e("h3",{attrs:{id:"_2、上下文类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2、上下文类型"}},[n._v("#")]),n._v(" 2、上下文类型")]),n._v(" "),e("p",[n._v("上下文类型取决于表达式的类型和其所处的位置，例如：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("window.onclick = function(e) {\n    console.log(e);  //报错提示\n};\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br")])]),e("p",[n._v("会出现这样的报错提示："),e("code",[n._v("[ts] Parameter :'e' implicitly has an 'any' type， but a better type may be inferred from usage.")]),n._v("，TS类型检查器使用window.onclick函数的类型来推断右边函数表达式的类型，从而推出"),e("code",[n._v("e")]),n._v("参数的类型，如果函数表达式不是在上下文类型的位置，则参数"),e("code",[n._v("e")]),n._v("具有"),e("code",[n._v("any")]),n._v("类型。我们知道，any表示任意类型， 可以被任何类型分配，也可以分配给任何类型;任意类型，是所有类型的子类型，当被赋予"),e("code",[n._v("any")]),n._v("类型的时候，就意味着跟JS运行一样了。那这里怎么改呢？既然已经提示了"),e("code",[n._v("e")]),n._v("具有"),e("code",[n._v("any")]),n._v("类型，那就明确"),e("code",[n._v("e")]),n._v("的类型为"),e("code",[n._v("any")]),n._v("就好了。一旦这个函数表达式有了明确的参数类型注解，上下文类型就会被忽略。")]),n._v(" "),e("h2",{attrs:{id:"二、类型断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二、类型断言"}},[n._v("#")]),n._v(" 二、类型断言")]),n._v(" "),e("p",[n._v("类型断言是指：当不确定一个联合类型的变量到底是哪种类型的时候，我们只能访问这个联合类型的所有类型里共有的属性或者方法，但是有的时候就是需要在还不确定类型的情况下就访问其中一个类型的属性和方法。类型断言可以用来手动指定一个值的类型。")]),n._v(" "),e("p",[n._v("类型断言不是类型转换，断言成一个联合类型中不存在的类型毫无疑问是不被允许的。")]),n._v(" "),e("p",[n._v("语法："),e("code",[n._v("<类型>值")]),n._v("或者"),e("code",[n._v("值 as 类型")]),n._v("。")]),n._v(" "),e("p",[n._v("举个例子：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function getFullName(fullname: string | number): number {\n    if (fullname.length) {\n        return fullname.length;\n    } else {\n        return fullname.toString().length;\n    }\n}\ngetFullName('hhhhhhhhh')\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br")])]),e("p",[n._v("如上代码，看上去逻辑好像一点问题也没有，但是就是会给你报错"),e("code",[n._v("Property 'length' does not exist on type 'string | number'")]),n._v(" 。这个时候，肯定不是换成JS来写，而是通过类型断言来让代码顺利执行，改造如下：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("function getFullName(fullname: string | number): number {\n    // if ((<string>fullname).length) {\n    if (fullname as string) {\n        return (<string>fullname).length\n    } else {\n        return fullname.toString().length\n    }\n}\ngetFullName('hhhhhhhhh')\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br")])]),e("p",[n._v("那么理解下面的代码，对你来说肯定就是小菜一碟啦~：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("let greet: any = 'hello'\nlet greetLength1: number = (<string>greet).length\nlet greetLength2: number = (<string>greet).length\nconsole.log(greetLength1);//5\nconsole.log(greetLength2);//5\n​\ninterface Ob1 {\n    name: string,\n}\ninterface Ob2 {\n    name: number,\n}\nlet myOb: Ob1 | Ob1 = {\n    name: '123'\n}\nlet obLength: number = (<string>myOb.name).length\nconsole.log(obLength);//3\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br")])])])}),[],!1,null,null,null);e.default=t.exports}}]);