(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{451:function(s,n,a){"use strict";a.r(n);var e=a(1),t=Object(e.a)({},(function(){var s=this,n=s._self._c;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("hr"),s._v(" "),n("h2",{attrs:{id:"highlight-a11y-darktheme-smartblue"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#highlight-a11y-darktheme-smartblue"}},[s._v("#")]),s._v(" highlight: a11y-dark\ntheme: smartblue")]),s._v(" "),n("p",[n("em",[n("strong",[s._v("本文正在参加"),n("a",{attrs:{href:"https://juejin.cn/post/7162096952883019783",title:"https://juejin.cn/post/7162096952883019783",target:"_blank",rel:"noopener noreferrer"}},[s._v("「金石计划 . 瓜分6万现金大奖」"),n("OutboundLink")],1)])])]),s._v(" "),n("p",[s._v("提到大文件上传，在脑海里最先想到的应该就是将图片保存在自己的服务器（如七牛云服务器），保存在数据库，不仅可以当做地址使用，还可以当做资源使用；或者将图片转换成base64，转换成buffer流，但是在javascript这门语言中不存在，但是这些只适用于一些小图片，对于大文件还是束手无策。")]),s._v(" "),n("h2",{attrs:{id:"一、问题分析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、问题分析"}},[s._v("#")]),s._v(" 一、问题分析")]),s._v(" "),n("p",[s._v("如果将大文件一次性上传，会发生什么？想必都遇到过在一个大文件上传、转发等操作时，由于要上传大量的数据，导致整个上传过程耗时漫长，更有甚者，上传失败，让你重新上传！这个时候，我已经咬牙切齿了。先不说上传时间长久，毕竟上传大文件也没那么容易，要传输更多的报文，丢包也是常有的事，而且在这个时间段万不可以做什么其他会中断上传的操作；其次，前后端交互肯定是有时间限制的，肯定不允许无限制时间上传，大文件又更容易超时而失败....")]),s._v(" "),n("h2",{attrs:{id:"一、解决方案"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、解决方案"}},[s._v("#")]),s._v(" 一、解决方案")]),s._v(" "),n("p",[s._v("既然大文件上传不适合一次性上传，那么将文件分片散上传是不是就能减少性能消耗了。")]),s._v(" "),n("p",[s._v("没错，就是分片上传。分片上传就是将大文件分成一个个小文件（切片），将切片进行上传，等到后端接收到所有切片，再将切片合并成大文件。通过将大文件拆分成多个小文件进行上传，确实就是解决了大文件上传的问题。因为请求时可以并发执行的，这样的话每个请求时间就会缩短，如果某个请求发送失败，也不需要全部重新发送。")]),s._v(" "),n("h2",{attrs:{id:"二、具体实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、具体实现"}},[s._v("#")]),s._v(" 二、具体实现")]),s._v(" "),n("h3",{attrs:{id:"_1、前端"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、前端"}},[s._v("#")]),s._v(" 1、前端")]),s._v(" "),n("h2",{attrs:{id:"_1-读取文件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-读取文件"}},[s._v("#")]),s._v(" （1）读取文件")]),s._v(" "),n("p",[s._v("准备HTML结构，包括：读取本地文件（"),n("code",[s._v("input")]),s._v("类型为"),n("code",[s._v("file")]),s._v("）、上传文件按钮、上传进度。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<input type="file" id="input">\n<button id="upload">上传</button>\n\x3c!-- 上传进度 --\x3e\n<div style="width: 300px" id="progress"></div>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("JS实现文件读取：")]),s._v(" "),n("p",[s._v("监听"),n("code",[s._v("input")]),s._v("的"),n("code",[s._v("change")]),s._v("事件，当选取了本地文件后，打印事件源可得到文件的一些信息：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("let input = document.getElementById('input')\nlet upload = document.getElementById('upload')\nlet files = {}//创建一个文件对象\nlet chunkList = []//存放切片的数组\n​\n// 读取文件\ninput.addEventListener('change', (e) => {\n    files = e.target.files[0]\n    console.log(files);\n    \n    //创建切片\n    //上传切片\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("观察控制台，打印读取的文件信息如下：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/854ffe094389481a90a133db574cfb07~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),n("h2",{attrs:{id:"_2-创建切片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-创建切片"}},[s._v("#")]),s._v(" （2）创建切片")]),s._v(" "),n("p",[s._v("文件的信息包括文件的名字，文件的大小，文件的类型等信息，接下来可以根据文件的大小来进行切片，例如将文件按照1MB或者2MB等大小进行切片操作：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 创建切片\nfunction createChunk(file, size = 2 * 1024 * 1024) {//两个形参：file是大文件，size是切片的大小\n    const chunkList = []\n    let cur = 0\n    while (cur < file.size) {\n        chunkList.push({\n                file: file.slice(cur, cur + size)//使用slice()进行切片\n        })\n        cur += size\n    }\n    return chunkList\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("p",[s._v("切片的核心思想是：创建一个空的切片列表数组"),n("code",[s._v("chunkList")]),s._v("，将大文件按照每个切片2MB进行切片操作，这里使用的是数组的"),n("code",[s._v("Array.prototype.slice()")]),s._v("方法，那么每个切片都应该在2MB大小左右，如上文件的大小是"),n("code",[s._v("8359021")]),s._v("，那么可得到4个切片，分别是[0，2MB]、[2MB，4MB]、[4MB,6MB]、[6MB,8MB]。调用"),n("code",[s._v("createChunk函数")]),s._v("，会返回一个切片列表数组，实际上，有几个切片就相当于有几个请求。")]),s._v(" "),n("p",[s._v("调用创建切片函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//注意调用位置，不是在全局，而是在读取文件的回调里调用\nchunkList = createChunk(files)\nconsole.log(chunkList);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("p",[s._v("观察控制台打印的结果：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dda1b745d26645a8b5ae188ec31c346e~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),n("h2",{attrs:{id:"_3-上传切片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-上传切片"}},[s._v("#")]),s._v(" （3）上传切片")]),s._v(" "),n("p",[s._v("上传切片的个关键的操作：")]),s._v(" "),n("p",[s._v("第一、数据处理。需要将切片的数据进行维护成一个包括该文件，文件名，切片名的对象，所以采用"),n("code",[s._v("FormData")]),s._v("对象来进行整理数据。"),n("code",[s._v("FormData 对象")]),s._v("用以将数据编译成键值对,可用于发送带键数据，通过调用它的"),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/API/FormData/append",target:"_blank",rel:"noopener noreferrer"}},[n("code",[s._v("append()")]),n("OutboundLink")],1),s._v("方法来添加字段，FormData.append()"),n("code",[s._v("方法会将字段类型为数字类型的转换成字符串（字段类型可以是 Blob、File")]),s._v("或者字符串："),n("strong",[s._v("如果它的字段类型不是 Blob 也不是 File，则会被转换成字符串类")]),s._v("。")]),s._v(" "),n("p",[s._v("第二、并发请求。每一个切片都分别作为一个请求，只有当这4个切片都传输给后端了，即四个请求都成功发起，才上传成功，使用"),n("code",[s._v("Promise.all()")]),s._v("保证所有的切片都已经传输给后端。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//数据处理\nasync function uploadFile(list) {\n    const requestList = list.map(({file,fileName,index,chunkName}) => {\n        const formData = new FormData() // 创建表单类型数据\n        formData.append('file', file)//该文件\n        formData.append('fileName', fileName)//文件名\n        formData.append('chunkName', chunkName)//切片名\n        return {formData,index}\n    })\n        .map(({formData,index}) =>axiosRequest({\n            method: 'post',\n            url: 'http://localhost:3000/upload',//请求接口，要与后端一一一对应\n            data: formData\n        })\n            .then(res => {\n                console.log(res);\n                //显示每个切片上传进度\n                let p = document.createElement('p')\n                p.innerHTML = `${list[index].chunkName}--${res.data.message}`\n                document.getElementById('progress').appendChild(p)\n            })\n        )\n        await Promise.all(requestList)//保证所有的切片都已经传输完毕\n}\n​\n//请求函数\nfunction axiosRequest({method = \"post\",url,data}) {\n    return new Promise((resolve, reject) => {\n        const config = {//设置请求头\n            headers: 'Content-Type:application/x-www-form-urlencoded',\n        }\n        //默认是post请求，可更改\n        axios[method](url,data,config).then((res) => {\n            resolve(res)\n        })\n    })\n}\n​\n// 文件上传\nupload.addEventListener('click', () => {\n    const uploadList = chunkList.map(({file}, index) => ({\n        file,\n        size: file.size,\n        percent: 0,\n        chunkName: `${files.name}-${index}`,\n        fileName: files.name,\n        index\n    }))\n    //发请求，调用函数\n    uploadFile(uploadList)\n​\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br")])]),n("h3",{attrs:{id:"_2、后端"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2、后端"}},[s._v("#")]),s._v(" 2、后端")]),s._v(" "),n("h2",{attrs:{id:"_1-接收切片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-接收切片"}},[s._v("#")]),s._v(" （1）接收切片")]),s._v(" "),n("p",[s._v("主要工作：")]),s._v(" "),n("p",[s._v("第一：需要引入"),n("code",[s._v("multiparty")]),s._v("中间件，来解析前端传来的"),n("code",[s._v("FormData")]),s._v("对象数据；")]),s._v(" "),n("p",[s._v("第二：通过"),n("code",[s._v("path.resolve()")]),s._v("在根目录创建一个文件夹--"),n("code",[s._v("qiepian")]),s._v("，该文件夹将存放另一个文件夹（存放所有的切片）和合并后的文件；")]),s._v(" "),n("p",[s._v("第三：处理跨域问题。通过"),n("code",[s._v("setHeader()")]),s._v("方法设置所有的请求头和所有的请求源都允许；")]),s._v(" "),n("p",[s._v("第四：解析数据成功后，拿到文件相关信息，并且在"),n("code",[s._v("qiepian")]),s._v("文件夹创建一个新的文件夹"),n("code",[s._v("${fileName}-chunks")]),s._v("，用来存放接收到的所有切片；")]),s._v(" "),n("p",[s._v("第五：通过"),n("code",[s._v("fse.move(filePath,fileName)")]),s._v("将切片移入"),n("code",[s._v("${fileName}-chunks")]),s._v("文件夹，最后向前端返回上传成功的信息。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("//app.js\nconst http = require('http')\nconst multiparty = require('multiparty')// 中间件，处理FormData对象的中间件\nconst path = require('path')\nconst fse = require('fs-extra')//文件处理模块\n​\nconst server = http.createServer()\nconst UPLOAD_DIR = path.resolve(__dirname, '.', 'qiepian')// 读取根目录，创建一个文件夹qiepian存放切片\n​\nserver.on('request', async (req, res) => {\n    // 处理跨域问题，允许所有的请求头和请求源\n    res.setHeader('Access-Control-Allow-Origin', '*')\n    res.setHeader('Access-Control-Allow-Headers', '*')\n​\n    if (req.url === '/upload') { //前端访问的地址正确\n        const multipart = new multiparty.Form() // 解析FormData对象\n        multipart.parse(req, async (err, fields, files) => {\n            if (err) { //解析失败\n                return\n            }\n            console.log('fields=', fields);\n            console.log('files=', files);\n            \n            const [file] = files.file\n            const [fileName] = fields.fileName\n            const [chunkName] = fields.chunkName\n            \n            const chunkDir = path.resolve(UPLOAD_DIR, `${fileName}-chunks`)//在qiepian文件夹创建一个新的文件夹，存放接收到的所有切片\n            if (!fse.existsSync(chunkDir)) { //文件夹不存在，新建该文件夹\n                await fse.mkdirs(chunkDir)\n            }\n​\n            // 把切片移动进chunkDir\n            await fse.move(file.path, `${chunkDir}/${chunkName}`)\n            res.end(JSON.stringify({ //向前端输出\n                code: 0,\n                message: '切片上传成功'\n            }))\n        })\n    }\n})\n​\nserver.listen(3000, () => {\n    console.log('服务已启动');\n})\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br")])]),n("p",[s._v("通过"),n("code",[s._v("node app.js")]),s._v("启动后端服务，可在控制台打印"),n("code",[s._v("fields和files")]),s._v("：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/92241d41eba14d6ea2757a8cc35ce687~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),n("h2",{attrs:{id:"_2-合并切片"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-合并切片"}},[s._v("#")]),s._v(" （2）合并切片")]),s._v(" "),n("p",[s._v("第一：前端得到后端返回的上传成功信息后，通知后端合并切片：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 通知后端去做切片合并\nfunction merge(size, fileName) {\n    axiosRequest({\n        method: 'post',\n        url: 'http://localhost:3000/merge',//后端合并请求\n        data: JSON.stringify({\n            size,\n            fileName\n        }),\n    })\n}\n​\n//调用函数，当所有切片上传成功之后，通知后端合并\nawait Promise.all(requestList)\nmerge(files.size, files.name)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("第二：后端接收到合并的数据，创建新的路由进行合并，合并的关键在于：前端通过"),n("code",[s._v("POST")]),s._v("请求向后端传递的合并数据是通过"),n("code",[s._v("JSON.stringify()")]),s._v("将数据转换成字符串，所以后端合并之前，需要进行以下操作：")]),s._v(" "),n("ul",[n("li",[s._v("解析POST请求传递的参数，自定义函数"),n("code",[s._v("resolvePost")]),s._v("，目的是将每个切片请求传递的数据进行拼接，拼接后的数据仍然是字符串，然后通过"),n("code",[s._v("JSON.parse()")]),s._v("将字符串格式的数据转换为JSON对象；")]),s._v(" "),n("li",[s._v("接下来该去合并了，拿到上个步骤解析成功后的数据进行解构，通过"),n("code",[s._v("path.resolve")]),s._v("获取每个切片所在的路径；")]),s._v(" "),n("li",[s._v("自定义合并函数"),n("code",[s._v("mergeFileChunk")]),s._v("，只要传入切片路径，切片名字和切片大小，就真的将所有的切片进行合并。在此之前需要将每个切片转换成流"),n("code",[s._v("stream")]),s._v("对象的形式进行合并，自定义函数"),n("code",[s._v("pipeStream")]),s._v("，目的是将切片转换成流对象，在这个函数里面创建可读流，读取所有的切片，监听"),n("code",[s._v("end")]),s._v("事件，所有的切片读取完毕后，销毁其对应的路径，保证每个切片只被读取一次，不重复读取，最后将汇聚所有切片的可读流汇入可写流；")]),s._v(" "),n("li",[s._v("最后，切片被读取成流对象，可读流被汇入可写流，那么在指定的位置通过"),n("code",[s._v("createWriteStream")]),s._v("创建可写流，同样使用"),n("code",[s._v("Promise.all()")]),s._v("的方法，保证所有切片都被读取，最后调用合并函数进行合并。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("if (req.url === '/merge') { // 该去合并切片了\n        const data = await resolvePost(req)\n        const {\n            fileName,\n            size\n        } = data\n        const filePath = path.resolve(UPLOAD_DIR, fileName)//获取切片路径\n        await mergeFileChunk(filePath, fileName, size)\n        res.end(JSON.stringify({\n            code: 0,\n            message: '文件合并成功'\n        }))\n}\n​\n// 合并\nasync function mergeFileChunk(filePath, fileName, size) {\n    const chunkDir = path.resolve(UPLOAD_DIR, `${fileName}-chunks`)\n​\n    let chunkPaths = await fse.readdir(chunkDir)\n    chunkPaths.sort((a, b) => a.split('-')[1] - b.split('-')[1])\n​\n    const arr = chunkPaths.map((chunkPath, index) => {\n        return pipeStream(\n            path.resolve(chunkDir, chunkPath),\n            // 在指定的位置创建可写流\n            fse.createWriteStream(filePath, {\n                start: index * size,\n                end: (index + 1) * size\n            })\n        )\n    })\n    await Promise.all(arr)//保证所有的切片都被读取\n}\n​\n// 将切片转换成流进行合并\nfunction pipeStream(path, writeStream) {\n    return new Promise(resolve => {\n        // 创建可读流，读取所有切片\n        const readStream = fse.createReadStream(path)\n        readStream.on('end', () => {\n            fse.unlinkSync(path)// 读取完毕后，删除已经读取过的切片路径\n            resolve()\n        })\n        readStream.pipe(writeStream)//将可读流流入可写流\n    })\n}\n​\n// 解析POST请求传递的参数\nfunction resolvePost(req) {\n    // 解析参数\n    return new Promise(resolve => {\n        let chunk = ''\n        req.on('data', data => { //req接收到了前端的数据\n            chunk += data //将接收到的所有参数进行拼接\n        })\n        req.on('end', () => {\n            resolve(JSON.parse(chunk))//将字符串转为JSON对象\n        })\n    })\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br"),n("span",{staticClass:"line-number"},[s._v("51")]),n("br"),n("span",{staticClass:"line-number"},[s._v("52")]),n("br"),n("span",{staticClass:"line-number"},[s._v("53")]),n("br"),n("span",{staticClass:"line-number"},[s._v("54")]),n("br"),n("span",{staticClass:"line-number"},[s._v("55")]),n("br"),n("span",{staticClass:"line-number"},[s._v("56")]),n("br"),n("span",{staticClass:"line-number"},[s._v("57")]),n("br"),n("span",{staticClass:"line-number"},[s._v("58")]),n("br"),n("span",{staticClass:"line-number"},[s._v("59")]),n("br"),n("span",{staticClass:"line-number"},[s._v("60")]),n("br")])]),n("p",[s._v("还未合并前，文件夹如下图所示：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3c835c0cf4df499faef1d800e9fb8a39~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),n("p",[s._v("合并后，文件夹新增了合并后的文件：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6a5d1966d76465e89d4e486f81ee966~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})])])}),[],!1,null,null,null);n.default=t.exports}}]);